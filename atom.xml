<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rex_log</title>
  <subtitle>print &quot;hello world&quot;</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://re2x.com/"/>
  <updated>2017-03-08T03:19:53.000Z</updated>
  <id>https://re2x.com/</id>
  
  <author>
    <name>rex_lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebRTC 入门介绍</title>
    <link href="https://re2x.com/webrtc-begin-intro/"/>
    <id>https://re2x.com/webrtc-begin-intro/</id>
    <published>2017-03-08T03:08:03.000Z</published>
    <updated>2017-03-08T03:19:53.000Z</updated>
    
    <content type="html">&lt;p&gt;本文不涉及获编译相关，此类内容请看 &lt;a href=&quot;/blog/webrtc-build-cmd/&quot;&gt;WebRTC 编译笔记&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是WebRTC&quot;&gt;&lt;a href=&quot;#什么是WebRTC&quot; class=&quot;headerlink&quot; title=&quot;什么是WebRTC&quot;&gt;&lt;/a&gt;什么是WebRTC&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;h3 id=&quot;如何实现一个点对点的音视频通话&quot;&gt;&lt;a href=&quot;#如何实现一个点对点的音视频通话&quot; class=&quot;headerlink&quot; title=&quot;如何实现一个点对点的音视频通话&quot;&gt;&lt;/a&gt;如何实现一个点对点的音视频通话&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Native 实现&lt;br&gt;摄像头访问、编解码、降噪、通讯、渲染、优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;web 实现&lt;br&gt;Flash&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;WebRTC是什么&quot;&gt;&lt;a href=&quot;#WebRTC是什么&quot; class=&quot;headerlink&quot; title=&quot;WebRTC是什么&quot;&gt;&lt;/a&gt;WebRTC是什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;网页即时通信（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行&lt;strong&gt;实时语音对话或视频对话的API&lt;/strong&gt;。它于2011年6月1日开源并在Google、Mozilla、Opera支持下被纳入万维网联盟的&lt;strong&gt;W3C推荐标准&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;我们说的WebRTC是&quot;&gt;&lt;a href=&quot;#我们说的WebRTC是&quot; class=&quot;headerlink&quot; title=&quot;我们说的WebRTC是&quot;&gt;&lt;/a&gt;我们说的WebRTC是&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;2010年5月，Google以6820万美元收购VoIP软件开发商Global IP Solutions的&lt;strong&gt;GIPS引擎&lt;/strong&gt;，并改为名为“&lt;strong&gt;WebRTC&lt;/strong&gt;”。WebRTC使用GIPS引擎，实现了基于网页的视频会议，并支持722，PCM，ILBC，ISAC等编码，同时使用谷歌自家的VP8视频解码器；同时支持RTP/SRTP传输等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; title=&quot;现状&quot;&gt;&lt;/a&gt;现状&lt;/h2&gt;&lt;h3 id=&quot;支持&quot;&gt;&lt;a href=&quot;#支持&quot; class=&quot;headerlink&quot; title=&quot;支持&quot;&gt;&lt;/a&gt;支持&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://test.webrtc.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;检测是否支持&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/post_images/webrtc_support.png&quot; alt=&quot;API框架图&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;WebRTC流程&quot;&gt;&lt;a href=&quot;#WebRTC流程&quot; class=&quot;headerlink&quot; title=&quot;WebRTC流程&quot;&gt;&lt;/a&gt;WebRTC流程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;API框架图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/blog/post_images/WebRTCNativeAPIsDocument.png&quot; alt=&quot;API框架图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发起序列图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/blog/post_images/WebRTCNativeAPIsDocument%20%281%29.png&quot; alt=&quot;发起序列图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接受序列图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/blog/post_images/WebRTCNativeAPIsDocument%20%282%29.png&quot; alt=&quot;接受序列图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结束序列图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/blog/post_images/WebRTCNativeAPIsDocument%20%283%29.png&quot; alt=&quot;结束序列图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;说说ICE&quot;&gt;&lt;a href=&quot;#说说ICE&quot; class=&quot;headerlink&quot; title=&quot;说说ICE&quot;&gt;&lt;/a&gt;说说ICE&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%92%E5%8B%95%E5%BC%8F%E9%80%A3%E6%8E%A5%E5%BB%BA%E7%AB%8B&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互动式连接建立&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;互动式连接建立是由IETF的MMUSIC工作组开发出来的一种framework，可整合各种NAT穿透技术，如STUN、TURN（Traversal Using Relay NAT，中继NAT实现的穿透）、RSIP（Realm Specific IP，特定域IP）等。该framework可以让SIP的客户端利用各种NAT穿透方式打穿远程的防火墙。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;NAT-网络地址转换&quot;&gt;&lt;a href=&quot;#NAT-网络地址转换&quot; class=&quot;headerlink&quot; title=&quot;NAT 网络地址转换&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NAT&lt;/a&gt; 网络地址转换&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;也叫做网络掩蔽或者IP掩蔽（IP masquerading），是一种在IP数据包通过路由器或防火墙时重写来源IP地址或目的IP地址的技术。这种技术被普遍使用在有多台主机但只通过一个公有IP地址访问因特网的私有网络中。根据规范，路由器是不能这样工作的，但它的确是一个方便并得到了广泛应用的技术。当然，NAT也让主机之间的通信变得复杂，导致通信效率的降低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;利用 &lt;a href=&quot;https://pypi.python.org/pypi/pystun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pystun&lt;/a&gt; 检测NAT类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full cone NAT 全锥型NAT&lt;br&gt;&lt;strong&gt;发过，谁都随便发&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一旦一个内部地址（iAddr:port1）映射到外部地址（eAddr:port2），所有发自iAddr:port1的包都经由eAddr:port2向外发送。&lt;strong&gt;任意外部主机都能通过给eAddr:port2发包到达iAddr:port1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Address-Restricted cone NAT 限制锥型NAT&lt;br&gt;&lt;strong&gt;发过给你，你随便发&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一旦一个内部地址（iAddr:port1）映射到外部地址（eAddr:port2），所有发自iAddr:port1的包都经由eAddr:port2向外发送。&lt;strong&gt;任意外部主机（hostAddr:any）都能通过给eAddr:port2发包到达iAddr:port1的前提是：iAddr:port1之前发送过包到hostAddr:any. “any”也就是说端口不受限制&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Port-Restricted cone NAT 端口限制锥型NAT&lt;br&gt;&lt;strong&gt;发过你这个端口，这个端口随便发&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一旦一个内部地址（iAddr:port1）映射到外部地址（eAddr:port2），所有发自iAddr:port1的包都经由eAddr:port2向外发送。&lt;strong&gt;一个外部主机（hostAddr:port3）能够发包到达iAddr:port1的前提是：iAddr:port1之前发送过包到hostAddr:port3&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Symmetric NAT 对称型NAT &lt;strong&gt;一一对应&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个来自相同内部IP与端口，到一个特定目的地地址和端口的请求，都映射到一个独特的外部IP地址和端口。&lt;br&gt;&lt;strong&gt;同一内部IP与端口发到不同的目的地和端口的信息包，都使用不同的映射&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提问&lt;br&gt;问题1: A是全锥型NAT（手机），B是端口限制锥型NAT，A、B2个人有直接通讯的可能吗？&lt;br&gt;问题2: C是全锥型NAT，D是对称型NAT(公司)，C、D2个人有直接通讯的可能吗？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;STUN-穿透&quot;&gt;&lt;a href=&quot;#STUN-穿透&quot; class=&quot;headerlink&quot; title=&quot;STUN 穿透&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/STUN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;STUN&lt;/a&gt; 穿透&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;STUN（Session Traversal Utilities for NAT，NAT会话穿越应用程序）是一种网络协议，它允许位于NAT（或多重NAT）后的客户端找出自己的公网地址，查出自己位于哪种类型的NAT之后以及NAT为某一个本地端口所绑定的Internet端端口。这些信息被用来在两个同时处于NAT路由器之后的主机之间建立UDP通信。该协议由RFC 5389定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;STUN 算法过程&lt;br&gt;&lt;img src=&quot;/blog/post_images/stun-progress.png&quot; alt=&quot;STUN过程&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;TURN-中转&quot;&gt;&lt;a href=&quot;#TURN-中转&quot; class=&quot;headerlink&quot; title=&quot;TURN 中转&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/TURN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TURN&lt;/a&gt; 中转&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;TURN是一个client-server协议。TURN的NAT穿透方法与STUN类似，都是通过取得应用层中的公有地址达到NAT穿透。但实现TURN client的终端必须在通讯开始前与TURN server进行交互，并要求TURN server产生”relay port”，也就是relayed-transport-address。这时TURN server会建立peer，即远端端点（remote endpoints），开始进行中继（relay）的动作，TURN client利用relay port将资料传送至peer，再由peer转传到另一方的TURN client。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;WebRTC源码中包含了STUN、TURN的客户端和服务端实现&lt;/p&gt;
&lt;h1 id=&quot;我们的目标&quot;&gt;&lt;a href=&quot;#我们的目标&quot; class=&quot;headerlink&quot; title=&quot;我们的目标&quot;&gt;&lt;/a&gt;我们的目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;实现基于WebRTC的，符合“联享家”和“景医卫”需求的，实时音视频框架。&lt;/li&gt;
&lt;li&gt;为什么用WebRTC，因为WebRTC实现很多我们需要的功能：音视频编解码，传输，复用等等，以及它的可靠性高，稳定性好，支持多个平台。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;我们要做什么&quot;&gt;&lt;a href=&quot;#我们要做什么&quot; class=&quot;headerlink&quot; title=&quot;我们要做什么&quot;&gt;&lt;/a&gt;我们要做什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先，能够实现需求所需要的功能（&lt;strong&gt;废话&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;一套完整的音视频流程、机制，包括服务端&lt;ul&gt;
&lt;li&gt;独立（不和具体需求耦合）&lt;/li&gt;
&lt;li&gt;复用（能够重复用于多个项目）&lt;/li&gt;
&lt;li&gt;统一（所有平台尽量统一代码、API，减少维护学习成本）&lt;/li&gt;
&lt;li&gt;稳定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于一个稳定的WebRTC版本进行开发，持续更新合并新的代码&lt;/li&gt;
&lt;li&gt;实现DTMF收发，H264编解码&lt;/li&gt;
&lt;li&gt;完善的文档、学习资料&lt;/li&gt;
&lt;li&gt;小团队维护，持续迭代&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;第一阶段目标&quot;&gt;&lt;a href=&quot;#第一阶段目标&quot; class=&quot;headerlink&quot; title=&quot;第一阶段目标&quot;&gt;&lt;/a&gt;第一阶段目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;各个开发人员学习WebRTC开发编译&lt;/li&gt;
&lt;li&gt;完善所有平台H264支持&lt;/li&gt;
&lt;li&gt;部署自己的ICE服务器&lt;/li&gt;
&lt;li&gt;编码实现各个平台的demo app，实现各个平台相互通讯&lt;/li&gt;
&lt;li&gt;输出相关笔记、文档等资料&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;代码分析&quot;&gt;&lt;a href=&quot;#代码分析&quot; class=&quot;headerlink&quot; title=&quot;代码分析&quot;&gt;&lt;/a&gt;代码分析&lt;/h1&gt;&lt;h2 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h2&gt;&lt;p&gt;根目录 src/&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;├── base&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── build  编译相关脚本&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── build_overrides  覆盖编译参数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── buildtools&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── data  测试数据&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── infra&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── resources 需要的资源文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── testing&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── third_party 用到的第三方库ffmpeg/openh264...代码，5G左右&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── tools&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── tools-webrtc 一些编译脚本&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── webrtc 核心代码&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;核心代码目录 src/webrtc&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;├── api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── audio&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── base&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── call&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── common_audio&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── common_video&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── h264&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── include&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── libyuv&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── examples&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── androidapp Android版AppRTCMbile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── androidjunit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── androidtests&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── objc  iOS版AppRTCMbile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── peerconnection&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── relayserver&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── stunprober&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── stunserver&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── turnserver&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── logging&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── media&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── modules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── audio_coding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── audio_conference_mixer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── audio_device&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── audio_mixer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── audio_processing&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── bitrate_controller&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── congestion_controller&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── desktop_capture&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── include&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── media_file&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── pacing&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── remote_bitrate_estimator&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── rtp_rtcp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── utility&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── video_capture&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── video_coding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── video_processing&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── p2p&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── base&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── client&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── quic&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── stunprober&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── pc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── sdk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── android  Android sdk封转&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── objc iOS sdk封转&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── stats&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── system_wrappers&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   ├── include&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── source&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── test&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── tools&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── video&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── voice_engine&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;gn 生成编译脚本等&lt;/li&gt;
&lt;li&gt;ninja 编译工具&lt;/li&gt;
&lt;li&gt;不论是 Xcode 还是 visual studio 最终还是调用了ninja进行编译&lt;/li&gt;
&lt;li&gt;增加、删除代码需要修改对应的 BUILD.gn 文件&lt;/li&gt;
&lt;li&gt;参考chromium的编译    &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/ios/build_instructions.md#Setting-up-the-build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/android_build_instructions.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/windows_build_instructions.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Windows 编译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体查看 &lt;a href=&quot;/blog/webrtc-build-cmd/&quot;&gt;WebRTC 编译笔记&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;怎么看代码&quot;&gt;&lt;a href=&quot;#怎么看代码&quot; class=&quot;headerlink&quot; title=&quot;怎么看代码&quot;&gt;&lt;/a&gt;怎么看代码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/android_studio.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio&lt;/a&gt; + &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual Studi Code&lt;/a&gt; + 插件&lt;/li&gt;
&lt;li&gt;Xcode 加编译参数 –ide=xcode&lt;/li&gt;
&lt;li&gt;Visual Studio 加编译参数 –ide=vs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;代码管理&quot;&gt;&lt;a href=&quot;#代码管理&quot; class=&quot;headerlink&quot; title=&quot;代码管理&quot;&gt;&lt;/a&gt;代码管理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;同步代码 &lt;code&gt;gclient sync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同步特点版本代码 &lt;code&gt;gclient sync -r git_commit_revision&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建分支 &lt;code&gt;git checkout -b linzq/dev/57 remotes/branch-heads/57&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;代码、分支管理建议用sourcetree + gitFlow流程&lt;/li&gt;
&lt;li&gt;翻墙建议用 shadowsocks，然后 proxifier 或者 proxyCap 来做全局代理&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://build.chromium.org/p/client.webrtc/waterfall&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webrtc CI日志&lt;/a&gt; 当你不确定checkout的版本是否有问题的时候，看看CI日志的编译情况，可以减少很多查错的时间&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/#!forum/discuss-webrtc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webrtc forum&lt;/a&gt; 版本更新、有疑问这里找&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001373962845513aefd77a99f4145f0a2c7a7ca057e7570000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git 介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;典型模块&quot;&gt;&lt;a href=&quot;#典型模块&quot; class=&quot;headerlink&quot; title=&quot;典型模块&quot;&gt;&lt;/a&gt;典型模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;API &lt;a href=&quot;https://chromium.googlesource.com/external/webrtc/+/master/webrtc/sdk/android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java libjingle_peerconnection_java&lt;/a&gt; &lt;strong&gt;&lt;a href=&quot;https://chromium.googlesource.com/external/webrtc/+/master/webrtc/sdk/objc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc rtc_sdk_framework&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&quot;https://chromium.googlesource.com/external/webrtc/+/master/webrtc/pc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++ libjingle_peerconnection&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://chromium.googlesource.com/external/webrtc/+/master/webrtc/modules/video_coding/codecs/h264/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;H264&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;演示&quot;&gt;&lt;a href=&quot;#演示&quot; class=&quot;headerlink&quot; title=&quot;演示&quot;&gt;&lt;/a&gt;演示&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Android &lt;strong&gt;&lt;a href=&quot;https://chromium.googlesource.com/external/webrtc/+/master/tools-webrtc/android/build_aar.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;aar包&lt;/a&gt;&lt;/strong&gt;  &lt;strong&gt;&lt;a href=&quot;https://chromium.googlesource.com/external/webrtc/+/master/webrtc/examples/androidapp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppRTCMobile&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iOS &lt;strong&gt;&lt;a href=&quot;https://chromium.googlesource.com/external/webrtc/+/master/tools-webrtc/ios/build_ios_libs.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FAT库&lt;/a&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;a href=&quot;https://chromium.googlesource.com/external/webrtc/+/master/webrtc/examples/objc/AppRTCMobile/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppRTCMobile&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows &lt;strong&gt;&lt;a href=&quot;https://chromium.googlesource.com/external/webrtc/+/master/webrtc/video/video_loopback.cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videoloopback&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;遇到有坑的地方，记得做好笔记，&lt;strong&gt;避免自己再次踩坑、后人受益&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;H264与WebRTC的历史&quot;&gt;&lt;a href=&quot;#H264与WebRTC的历史&quot; class=&quot;headerlink&quot; title=&quot;H264与WebRTC的历史&quot;&gt;&lt;/a&gt;H264与WebRTC的历史&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;15年左右的版本是不只是H264的编解码的&lt;/li&gt;
&lt;li&gt;16年增加了openh264实现编码，沿用原来的ffmpeg代码来实现解码&lt;/li&gt;
&lt;li&gt;最新的是:&lt;ul&gt;
&lt;li&gt;非android/iOS已经实现了软编解码(openh264+ffmepg)&lt;/li&gt;
&lt;li&gt;iOS 使用了硬编解码&lt;/li&gt;
&lt;li&gt;Android针对高通、三星平台使用硬编解码，其他不支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;初步计划&quot;&gt;&lt;a href=&quot;#初步计划&quot; class=&quot;headerlink&quot; title=&quot;初步计划&quot;&gt;&lt;/a&gt;初步计划&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;3月份，所有成员能够&lt;strong&gt;编译、调试代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;4月份，初步完成各个平台的&lt;strong&gt;Demo APP，ICE服务器部署&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;5月份，初步 完成可以与联享家APP、门口机APP&lt;strong&gt;联调的版本&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;6月份，完成第一个&lt;strong&gt;基本的稳定版本&lt;/strong&gt;（各个平台）&lt;/li&gt;
&lt;li&gt;7月份，&lt;strong&gt;通用的稳定版本&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;怎么做&quot;&gt;&lt;a href=&quot;#怎么做&quot; class=&quot;headerlink&quot; title=&quot;怎么做&quot;&gt;&lt;/a&gt;怎么做&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Just Do it&lt;/li&gt;
&lt;li&gt;把 &lt;a href=&quot;http://www.webrtc.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webrtc.org&lt;/a&gt; 上面的内容都仔细看看，会有很多收获的&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;讨论&quot;&gt;&lt;a href=&quot;#讨论&quot; class=&quot;headerlink&quot; title=&quot;讨论&quot;&gt;&lt;/a&gt;讨论&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;说说看你们的个人理解&lt;/li&gt;
&lt;li&gt;有什么疑问&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/WebRTC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki - WebRTC&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chromium docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文不涉及获编译相关，此类内容请看 &lt;a href=&quot;/blog/webrtc-build-cmd/&quot;&gt;WebRTC 编译笔记&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是WebRTC&quot;&gt;&lt;a href=&quot;#什么是WebRTC&quot; class=&quot;headerlink&quot; title=&quot;什么是WebRTC&quot;&gt;&lt;/a&gt;什么是WebRTC&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;h3 id=&quot;如何实现一个点对点的音视频通话&quot;&gt;&lt;a href=&quot;#如何实现一个点对点的音视频通话&quot; class=&quot;headerlink&quot; title=&quot;如何实现一个点对点的音视频通话&quot;&gt;&lt;/a&gt;如何实现一个点对点的音视频通话&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Native 实现&lt;br&gt;摄像头访问、编解码、降噪、通讯、渲染、优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;web 实现&lt;br&gt;Flash&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;WebRTC是什么&quot;&gt;&lt;a href=&quot;#WebRTC是什么&quot; class=&quot;headerlink&quot; title=&quot;WebRTC是什么&quot;&gt;&lt;/a&gt;WebRTC是什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;网页即时通信（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行&lt;strong&gt;实时语音对话或视频对话的API&lt;/strong&gt;。它于2011年6月1日开源并在Google、Mozilla、Opera支持下被纳入万维网联盟的&lt;strong&gt;W3C推荐标准&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;我们说的WebRTC是&quot;&gt;&lt;a href=&quot;#我们说的WebRTC是&quot; class=&quot;headerlink&quot; title=&quot;我们说的WebRTC是&quot;&gt;&lt;/a&gt;我们说的WebRTC是&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;2010年5月，Google以6820万美元收购VoIP软件开发商Global IP Solutions的&lt;strong&gt;GIPS引擎&lt;/strong&gt;，并改为名为“&lt;strong&gt;WebRTC&lt;/strong&gt;”。WebRTC使用GIPS引擎，实现了基于网页的视频会议，并支持722，PCM，ILBC，ISAC等编码，同时使用谷歌自家的VP8视频解码器；同时支持RTP/SRTP传输等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; title=&quot;现状&quot;&gt;&lt;/a&gt;现状&lt;/h2&gt;&lt;h3 id=&quot;支持&quot;&gt;&lt;a href=&quot;#支持&quot; class=&quot;headerlink&quot; title=&quot;支持&quot;&gt;&lt;/a&gt;支持&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://test.webrtc.org/&quot;&gt;检测是否支持&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/post_images/webrtc_support.png&quot; alt=&quot;API框架图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="WebRTC" scheme="https://re2x.com/categories/WebRTC/"/>
    
    
      <category term="WebRTC" scheme="https://re2x.com/tags/WebRTC/"/>
    
      <category term="Android" scheme="https://re2x.com/tags/Android/"/>
    
      <category term="混合iOS" scheme="https://re2x.com/tags/%E6%B7%B7%E5%90%88iOS/"/>
    
      <category term="编译" scheme="https://re2x.com/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>WebRTC 编译笔记</title>
    <link href="https://re2x.com/webrtc-build-cmd/"/>
    <id>https://re2x.com/webrtc-build-cmd/</id>
    <published>2017-03-02T01:52:01.000Z</published>
    <updated>2017-03-07T07:33:03.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS产生xcode项目&quot;&gt;&lt;a href=&quot;#iOS产生xcode项目&quot; class=&quot;headerlink&quot; title=&quot;iOS产生xcode项目&quot;&gt;&lt;/a&gt;iOS产生xcode项目&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gn gen out/ios64 -args=&amp;quot;target_os=\&amp;quot;ios\&amp;quot; target_cpu=\&amp;quot;x64\&amp;quot; is_component_build=false proprietary_codecs=true ios_enable_code_signing=false&amp;quot; --ide=xcode&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;xcode项目文件位置 out/ios64/all.workspace ，项目包含多个TARGETS,其中AppRTCMobile是apprtc的ios版本&lt;/p&gt;
&lt;h1 id=&quot;iOS-FAT库打包（57后面的版本才可用）&quot;&gt;&lt;a href=&quot;#iOS-FAT库打包（57后面的版本才可用）&quot; class=&quot;headerlink&quot; title=&quot;iOS FAT库打包（57后面的版本才可用）&quot;&gt;&lt;/a&gt;iOS FAT库打包（57后面的版本才可用）&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;./tools-webrtc/ios/build_ios_libs.sh --extra-gn-args=&amp;apos;proprietary_codecs=true&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认生成根目录下 out_ios_libs/WebRTC.framework 文件&lt;/p&gt;
&lt;h1 id=&quot;windows产生vs2015编译配置&quot;&gt;&lt;a href=&quot;#windows产生vs2015编译配置&quot; class=&quot;headerlink&quot; title=&quot;windows产生vs2015编译配置&quot;&gt;&lt;/a&gt;windows产生vs2015编译配置&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gn gen out/win_x64 -args=&amp;quot;target_cpu=\&amp;quot;x64\&amp;quot; proprietary_codecs=true use_openh264=true ffmpeg_branding=\&amp;quot;Chrome\&amp;quot;&amp;quot; --ide=vs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gn gen out/win_x86 -args=&amp;quot;target_cpu=\&amp;quot;x86\&amp;quot; proprietary_codecs=true use_openh264=true ffmpeg_branding=\&amp;quot;Chrome\&amp;quot;&amp;quot; --ide=vs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;vs项目文件位置 out/win_x64/all.sln&lt;/p&gt;
&lt;h1 id=&quot;Android产生编译配置&quot;&gt;&lt;a href=&quot;#Android产生编译配置&quot; class=&quot;headerlink&quot; title=&quot;Android产生编译配置&quot;&gt;&lt;/a&gt;Android产生编译配置&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gn gen out/android_arm -args=&amp;apos;target_os=&amp;quot;android&amp;quot; target_cpu=&amp;quot;arm&amp;quot; is_componnent_build=false proprietary_codecs=true use_openh264=true ffmpeg_branding=&amp;quot;Chrome&amp;quot;&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Android-aar打包（57后面的版本才可用）&quot;&gt;&lt;a href=&quot;#Android-aar打包（57后面的版本才可用）&quot; class=&quot;headerlink&quot; title=&quot;Android aar打包（57后面的版本才可用）&quot;&gt;&lt;/a&gt;Android aar打包（57后面的版本才可用）&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;./tools-webrtc/android/build_aar.py --verbose --extra-gn-args=&amp;apos;proprietary_codecs=true use_openh264=true ffmpeg_branding=&amp;quot;Chrome&amp;quot;&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认生成根目录下 libwebrtc.aar 文件&lt;/p&gt;
&lt;h1 id=&quot;Android产生Android-Studio编译配置&quot;&gt;&lt;a href=&quot;#Android产生Android-Studio编译配置&quot; class=&quot;headerlink&quot; title=&quot;Android产生Android Studio编译配置&quot;&gt;&lt;/a&gt;Android产生Android Studio编译配置&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;2017-02-23&lt;/code&gt; 更新&lt;/strong&gt;&lt;br&gt;最新的WebRTC项目已经支持生成AS项目，链接 &lt;a href=&quot;https://groups.google.com/forum/#!topic/discuss-webrtc/b7yQjvPLHaM&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PSA: AppRTCMobile can now be developed in Android Studio&lt;/a&gt;  ，具体做法如下：&lt;/p&gt;
&lt;p&gt;执行如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;build/android/gradle/generate_gradle.py --output-directory $PWD/out/Debug --target &amp;quot;//webrtc/examples:AppRTCMobile&amp;quot; --use-gradle-process-resources&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成的项目目录&lt;code&gt;out/Debug/gradle&lt;/code&gt;，需要Android Studio 2.2及以上版本&lt;/p&gt;
&lt;p&gt;具体编译方法查看 &lt;a href=&quot;https://chromium.googlesource.com/chromium/src.git/+/master/docs/android_studio.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android_studio.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如下内容已被废弃↓&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;由于WebRTC本身没有可以产生AS项目的脚本，我们需要自己手动生成&lt;br&gt;1.先执行 &lt;code&gt;Android aar打包&lt;/code&gt; 命令，产生 &lt;code&gt;libwebrtc.aar&lt;/code&gt;&lt;br&gt;2.新建一个 &lt;code&gt;Android Studio Project&lt;/code&gt;&lt;br&gt;3.在新建的 &lt;code&gt;Projec&lt;/code&gt;  新建一个 &lt;code&gt;Module&lt;/code&gt; ，选择 &lt;code&gt;Import .JAR/.AAR Package&lt;/code&gt; ，选择 &lt;code&gt;步骤1&lt;/code&gt; 生成的 &lt;code&gt;libwebrtc.aar&lt;/code&gt; ，Subproject Name设为&lt;code&gt;libwebrtc&lt;/code&gt;&lt;br&gt;4.在 &lt;code&gt;app&lt;/code&gt; Module的 &lt;code&gt;build.gradle&lt;/code&gt; 的 &lt;code&gt;dependencies&lt;/code&gt; 节点增加 &lt;code&gt;compile project(&amp;quot;:libwebrtc&amp;quot;)&lt;/code&gt;&lt;br&gt;5.把 &lt;code&gt;webrtc/examples/androidapp&lt;/code&gt; 目录下的 &lt;code&gt;res&lt;/code&gt; 、 &lt;code&gt;src&lt;/code&gt; 文件夹及 &lt;code&gt;AndroidMainifest&lt;/code&gt; 文件复制到 &lt;code&gt;app&lt;/code&gt; Module，还有 &lt;code&gt;webrtc/examples/androidapp/third_party/autobanh/lib/autobanh.jar&lt;/code&gt; 复制到 &lt;code&gt;app&lt;/code&gt; Module的 &lt;code&gt;libs&lt;/code&gt; 目录&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ninja -C out/debug&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;查看编译配置参数&quot;&gt;&lt;a href=&quot;#查看编译配置参数&quot; class=&quot;headerlink&quot; title=&quot;查看编译配置参数&quot;&gt;&lt;/a&gt;查看编译配置参数&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gn args out/debug --list&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;查看可用的target&quot;&gt;&lt;a href=&quot;#查看可用的target&quot; class=&quot;headerlink&quot; title=&quot;查看可用的target&quot;&gt;&lt;/a&gt;查看可用的target&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gn ls out/debug&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;获取特定版本&quot;&gt;&lt;a href=&quot;#获取特定版本&quot; class=&quot;headerlink&quot; title=&quot;获取特定版本&quot;&gt;&lt;/a&gt;获取特定版本&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;获取正式的版本：使用 &lt;code&gt;gclient sync&lt;/code&gt; 下载完全部代码后，在代码目录下用 &lt;code&gt;git branch -a&lt;/code&gt; 查看所有版本，并用&lt;code&gt;git checkout remotes/branch-heads/57&lt;/code&gt; 获取57这个版本。&lt;/li&gt;
&lt;li&gt;获取某次commit的版本：使用 &lt;code&gt;gclient sync -r src@037ee92455a6e7fc01efb4397a6cdcf8e49389b4&lt;/code&gt; 获取037ee92455a6e7fc01efb4397a6cdcf8e49389b4这个commit id的版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webrtc.org/native-code/development/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebRTC Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@atsakiridis/building-a-fat-webrtc-framework-on-ios-8610fffb2224#.v7zqct8v9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building a Fat WebRTC framework on iOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/windows_build_instructions.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Checking out and Building Chromium for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/DEPS#234&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看chromium项目用的WebRTC版本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS产生xcode项目&quot;&gt;&lt;a href=&quot;#iOS产生xcode项目&quot; class=&quot;headerlink&quot; title=&quot;iOS产生xcode项目&quot;&gt;&lt;/a&gt;iOS产生xcode项目&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gn gen out/ios64 -args=&amp;quot;target_os=\&amp;quot;ios\&amp;quot; target_cpu=\&amp;quot;x64\&amp;quot; is_component_build=false proprietary_codecs=true ios_enable_code_signing=false&amp;quot; --ide=xcode&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;xcode项目文件位置 out/ios64/all.workspace ，项目包含多个TARGETS,其中AppRTCMobile是apprtc的ios版本&lt;/p&gt;
&lt;h1 id=&quot;iOS-FAT库打包（57后面的版本才可用）&quot;&gt;&lt;a href=&quot;#iOS-FAT库打包（57后面的版本才可用）&quot; class=&quot;headerlink&quot; title=&quot;iOS FAT库打包（57后面的版本才可用）&quot;&gt;&lt;/a&gt;iOS FAT库打包（57后面的版本才可用）&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;./tools-webrtc/ios/build_ios_libs.sh --extra-gn-args=&amp;apos;proprietary_codecs=true&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认生成根目录下 out_ios_libs/WebRTC.framework 文件&lt;/p&gt;
&lt;h1 id=&quot;windows产生vs2015编译配置&quot;&gt;&lt;a href=&quot;#windows产生vs2015编译配置&quot; class=&quot;headerlink&quot; title=&quot;windows产生vs2015编译配置&quot;&gt;&lt;/a&gt;windows产生vs2015编译配置&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gn gen out/win_x64 -args=&amp;quot;target_cpu=\&amp;quot;x64\&amp;quot; proprietary_codecs=true use_openh264=true ffmpeg_branding=\&amp;quot;Chrome\&amp;quot;&amp;quot; --ide=vs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gn gen out/win_x86 -args=&amp;quot;target_cpu=\&amp;quot;x86\&amp;quot; proprietary_codecs=true use_openh264=true ffmpeg_branding=\&amp;quot;Chrome\&amp;quot;&amp;quot; --ide=vs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;vs项目文件位置 out/win_x64/all.sln&lt;/p&gt;
&lt;h1 id=&quot;Android产生编译配置&quot;&gt;&lt;a href=&quot;#Android产生编译配置&quot; class=&quot;headerlink&quot; title=&quot;Android产生编译配置&quot;&gt;&lt;/a&gt;Android产生编译配置&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gn gen out/android_arm -args=&amp;apos;target_os=&amp;quot;android&amp;quot; target_cpu=&amp;quot;arm&amp;quot; is_componnent_build=false proprietary_codecs=true use_openh264=true ffmpeg_branding=&amp;quot;Chrome&amp;quot;&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="WebRTC" scheme="https://re2x.com/categories/WebRTC/"/>
    
    
      <category term="WebRTC" scheme="https://re2x.com/tags/WebRTC/"/>
    
      <category term="Android" scheme="https://re2x.com/tags/Android/"/>
    
      <category term="混合iOS" scheme="https://re2x.com/tags/%E6%B7%B7%E5%90%88iOS/"/>
    
      <category term="编译" scheme="https://re2x.com/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>AppRTC服务器部署资料整理</title>
    <link href="https://re2x.com/apprtc-note-0/"/>
    <id>https://re2x.com/apprtc-note-0/</id>
    <published>2016-08-17T02:00:32.000Z</published>
    <updated>2016-09-21T02:21:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;AppRTC介绍&quot;&gt;&lt;a href=&quot;#AppRTC介绍&quot; class=&quot;headerlink&quot; title=&quot;AppRTC介绍&quot;&gt;&lt;/a&gt;AppRTC介绍&lt;/h1&gt;&lt;h1 id=&quot;AppRTC服务组件&quot;&gt;&lt;a href=&quot;#AppRTC服务组件&quot; class=&quot;headerlink&quot; title=&quot;AppRTC服务组件&quot;&gt;&lt;/a&gt;AppRTC服务组件&lt;/h1&gt;&lt;h2 id=&quot;业务服务器-AppRTC&quot;&gt;&lt;a href=&quot;#业务服务器-AppRTC&quot; class=&quot;headerlink&quot; title=&quot;业务服务器 AppRTC&quot;&gt;&lt;/a&gt;业务服务器 &lt;a href=&quot;https://github.com/webrtc/apprtc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppRTC&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;参数：&lt;a href=&quot;https://appr.tc/params.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://appr.tc/params.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;信令服务器-Collider&quot;&gt;&lt;a href=&quot;#信令服务器-Collider&quot; class=&quot;headerlink&quot; title=&quot;信令服务器 Collider&quot;&gt;&lt;/a&gt;信令服务器 &lt;a href=&quot;https://github.com/webrtc/apprtc/blob/master/src/collider/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Collider&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;TURN（ICE）服务器-Coturn&quot;&gt;&lt;a href=&quot;#TURN（ICE）服务器-Coturn&quot; class=&quot;headerlink&quot; title=&quot;TURN（ICE）服务器 Coturn&quot;&gt;&lt;/a&gt;TURN（ICE）服务器 &lt;a href=&quot;https://github.com/coturn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coturn&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&quot;AppRTC部署过程&quot;&gt;&lt;a href=&quot;#AppRTC部署过程&quot; class=&quot;headerlink&quot; title=&quot;AppRTC部署过程&quot;&gt;&lt;/a&gt;AppRTC部署过程&lt;/h1&gt;&lt;h2 id=&quot;部署AppRTC-参考&quot;&gt;&lt;a href=&quot;#部署AppRTC-参考&quot; class=&quot;headerlink&quot; title=&quot;部署AppRTC 参考&quot;&gt;&lt;/a&gt;部署AppRTC &lt;a href=&quot;https://github.com/webrtc/apprtc#deployment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;AppRTC是需要用到&lt;a href=&quot;https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Python&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google App Engine SDK for Python &lt;/a&gt;和&lt;a href=&quot;http://gruntjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;源码下载 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git clone &lt;a href=&quot;https://github.com/webrtc/apprtc.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/webrtc/apprtc.git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;部署Collider-参考&quot;&gt;&lt;a href=&quot;#部署Collider-参考&quot; class=&quot;headerlink&quot; title=&quot;部署Collider 参考&quot;&gt;&lt;/a&gt;部署Collider &lt;a href=&quot;https://github.com/webrtc/apprtc/blob/master/src/collider/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Collider是GO开发的，所以需要安装Go环境，安装参考 &lt;a href=&quot;http://golang.org/doc/install&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://golang.org/doc/install&lt;/a&gt; and &lt;a href=&quot;http://golang.org/doc/code.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://golang.org/doc/code.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;源码位于apprtc/src/collider/collider&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;确定你已经设置&lt;code&gt;GOPATH&lt;/code&gt;环境变量，例如：&lt;code&gt;export GOPATH=$HOME/goWorkspace&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复制一份源码到$GOPATH/src&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cp -r apprtc/src/collider $GOPATH/src&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装依赖性 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;go get collidermain&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 collidermain &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;go install collidermain&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动 collidermain &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$GOPATH/bin/collidermain -port=8089 -tls=false -room-server=&lt;a href=&quot;http://47.88.32.224:8080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://47.88.32.224:8080&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;部署Coturn&quot;&gt;&lt;a href=&quot;#部署Coturn&quot; class=&quot;headerlink&quot; title=&quot;部署Coturn&quot;&gt;&lt;/a&gt;部署Coturn&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;源码下载 &lt;code&gt;http://turnserver.open-sys.org/downloads/v4.5.0.3/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成加密用的密钥 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo openssl req -x509 -newkey rsa:2048 -keyout /usr/local/etc/turn_server_pkey.pem -out /usr/local/etc/turn_server_cert.pem -days 99999 -nodes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;启动服务&quot;&gt;&lt;a href=&quot;#启动服务&quot; class=&quot;headerlink&quot; title=&quot;启动服务&quot;&gt;&lt;/a&gt;启动服务&lt;/h1&gt;&lt;h2 id=&quot;启动apprtc&quot;&gt;&lt;a href=&quot;#启动apprtc&quot; class=&quot;headerlink&quot; title=&quot;启动apprtc&quot;&gt;&lt;/a&gt;启动apprtc&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;cd到apprtc目录，执行：&lt;blockquote&gt;
&lt;p&gt;dev_appserver.py –host 0.0.0.0 ./out/app_engine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;启动collider&quot;&gt;&lt;a href=&quot;#启动collider&quot; class=&quot;headerlink&quot; title=&quot;启动collider&quot;&gt;&lt;/a&gt;启动collider&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;cd到$GOPATH/bin目录，执行：&lt;blockquote&gt;
&lt;p&gt;$GOPATH/bin/collidermain -port=8089 -tls=false -room-server=”&lt;a href=&quot;http://47.88.32.224:8080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://47.88.32.224:8080&lt;/a&gt;“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;启动coturn&quot;&gt;&lt;a href=&quot;#启动coturn&quot; class=&quot;headerlink&quot; title=&quot;启动coturn&quot;&gt;&lt;/a&gt;启动coturn&lt;/h2&gt;&lt;h3 id=&quot;命令行参数启动&quot;&gt;&lt;a href=&quot;#命令行参数启动&quot; class=&quot;headerlink&quot; title=&quot;命令行参数启动&quot;&gt;&lt;/a&gt;命令行参数启动&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;turnserver -a -v -n –no-dtls –no-tls -u linzq:linzq -r “apprtc”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;配置文件启动&quot;&gt;&lt;a href=&quot;#配置文件启动&quot; class=&quot;headerlink&quot; title=&quot;配置文件启动&quot;&gt;&lt;/a&gt;配置文件启动&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;turnserver -c /etc/turnserver/turnserver.conf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;服务启动&quot;&gt;&lt;a href=&quot;#服务启动&quot; class=&quot;headerlink&quot; title=&quot;服务启动&quot;&gt;&lt;/a&gt;服务启动&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;service turnserver start&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://test.webrtc.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://test.webrtc.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;1.&lt;a href=&quot;http://www.jianshu.com/p/c55ecf5a3fcf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自建 AppRTC&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;http://io.diveinedu.com/2015/02/05/%E7%AC%AC%E5%85%AD%E7%AB%A0-WebRTC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第六章 WebRTC服务器搭建&lt;/a&gt;&lt;br&gt;3.&lt;a href=&quot;http://www.hankcs.com/program/network/actual-rfc5766-turn-server-and-ice4j-wide-area-network-communication.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实战rfc5766-turn-server和ice4j广域网通讯&lt;/a&gt;&lt;br&gt;4.&lt;a href=&quot;https://webrtc.github.io/samples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebRTC samples&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AppRTC介绍&quot;&gt;&lt;a href=&quot;#AppRTC介绍&quot; class=&quot;headerlink&quot; title=&quot;AppRTC介绍&quot;&gt;&lt;/a&gt;AppRTC介绍&lt;/h1&gt;&lt;h1 id=&quot;AppRTC服务组件&quot;&gt;&lt;a href=&quot;#AppRTC服务组件&quot; class=&quot;
    
    </summary>
    
      <category term="WebRTC" scheme="https://re2x.com/categories/WebRTC/"/>
    
      <category term="AppRTC" scheme="https://re2x.com/categories/WebRTC/AppRTC/"/>
    
    
      <category term="AppRTC" scheme="https://re2x.com/tags/AppRTC/"/>
    
      <category term="WebRTC" scheme="https://re2x.com/tags/WebRTC/"/>
    
      <category term="音视频" scheme="https://re2x.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
      <category term="部署" scheme="https://re2x.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Highcharts Demo</title>
    <link href="https://re2x.com/highcharts-2-demo/"/>
    <id>https://re2x.com/highcharts-2-demo/</id>
    <published>2016-07-29T06:40:34.000Z</published>
    <updated>2016-10-28T06:59:04.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在项目中用到了highcharts来实现图表功能，做了几个demo给相关的同事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/demo/charts/charts_demo.html&quot;&gt;最近7日数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe style=&quot;border:none;width:100%;height:250px;&quot; src=&quot;/demo/charts/charts_demo.html&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/demo/bp-charts/bp-charts.html?show=14&amp;amp;dl=1&quot;&gt;血压数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe style=&quot;border:none;width:100%;height:250px;&quot; src=&quot;/demo/bp-charts/bp-charts.html?show=14&amp;amp;dl=1&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/demo/bp-charts/ss-charts.html?show=21&amp;amp;type=%E8%A1%80%E6%B0%A7%E9%A5%B1%E5%92%8C%E5%BA%A6&quot;&gt;血氧饱和度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe style=&quot;border:none;width:100%;height:250px;&quot; src=&quot;/demo/bp-charts/ss-charts.html?show=21&amp;type=%E8%A1%80%E6%B0%A7%E9%A5%B1%E5%92%8C%E5%BA%A6&quot;&gt;&lt;/iframe&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在项目中用到了highcharts来实现图表功能，做了几个demo给相关的同事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/demo/charts/charts_demo.html&quot;&gt;最近7日数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe style=&quot;borde
    
    </summary>
    
      <category term="Demo" scheme="https://re2x.com/categories/Demo/"/>
    
    
      <category term="Highcharts" scheme="https://re2x.com/tags/Highcharts/"/>
    
      <category term="Demo" scheme="https://re2x.com/tags/Demo/"/>
    
      <category term="图表" scheme="https://re2x.com/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>思而不学则die</title>
    <link href="https://re2x.com/%E6%80%9D%E8%80%8C%E4%B8%8D%E5%AD%A6%E5%88%99die/"/>
    <id>https://re2x.com/思而不学则die/</id>
    <published>2016-07-20T04:04:11.000Z</published>
    <updated>2016-07-20T04:31:23.000Z</updated>
    
    <content type="html">&lt;p&gt;王小波最推崇的一段台词，来自英若诚翻译的萧伯纳名剧《芭芭拉少校》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 大军火商安德谢夫与儿子斯蒂文的对白。安德谢夫：“你到底知道什么？，关心什么？”斯蒂文：“我知道什么是对的，什么是错的。”安德谢夫：“不可思议！对工商业深恶痛绝，对法律一无所知，和文学艺术无缘，对哲学毫无野心，可是掌握了人世间最大的秘密，叫历代哲学家猜不透的，叫古今律师无法解释的，叫工商业大亨糊里糊涂的，叫艺术家走投无路的，你居然掌握了这个秘密，你知道什么是对的，什么是错的。天哪，你是天才，你是大师中的大师，你是神！才二十四岁！”&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;王小波最推崇的一段台词，来自英若诚翻译的萧伯纳名剧《芭芭拉少校》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 大军火商安德谢夫与儿子斯蒂文的对白。安德谢夫：“你到底知道什么？，关心什么？”斯蒂文：“我知道什么是对的，什么是错的。”安德谢夫：“不可思议！对工商业深恶痛绝，对法律
    
    </summary>
    
      <category term="杂文" scheme="https://re2x.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="台词" scheme="https://re2x.com/tags/%E5%8F%B0%E8%AF%8D/"/>
    
      <category term="王小波" scheme="https://re2x.com/tags/%E7%8E%8B%E5%B0%8F%E6%B3%A2/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Hybrid App</title>
    <link href="https://re2x.com/hybrid-app-brief-talk/"/>
    <id>https://re2x.com/hybrid-app-brief-talk/</id>
    <published>2016-07-18T03:44:06.000Z</published>
    <updated>2016-07-18T08:05:37.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;浅谈Hybrid-App开发&quot;&gt;&lt;a href=&quot;#浅谈Hybrid-App开发&quot; class=&quot;headerlink&quot; title=&quot;浅谈Hybrid App开发&quot;&gt;&lt;/a&gt;浅谈Hybrid App开发&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我们常说的：在Android、iOS上的用H5来做界面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们把档次稍微提高一下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今天和大家分享的是&lt;strong&gt; Hybrid App 的开发&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hybrid App开发&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它不是手机网页开发、不是html、不是h5，但又都是&lt;/li&gt;
&lt;li&gt;做这个需要懂iOS、Android，还要懂html、js、css&lt;/li&gt;
&lt;li&gt;最麻烦的还是兼容性，主要的工作还是在web开发上&lt;/li&gt;
&lt;li&gt;已是主流了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/blog/post_images/hybrid-app-brief-talk-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为什么要谈Hybrid-App开发&quot;&gt;&lt;a href=&quot;#为什么要谈Hybrid-App开发&quot; class=&quot;headerlink&quot; title=&quot;为什么要谈Hybrid App开发&quot;&gt;&lt;/a&gt;为什么要谈Hybrid App开发&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;我们现在的App就是Hybrid-App&quot;&gt;&lt;a href=&quot;#我们现在的App就是Hybrid-App&quot; class=&quot;headerlink&quot; title=&quot;我们现在的App就是Hybrid App&quot;&gt;&lt;/a&gt;我们现在的App就是Hybrid App&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所以我们做得比较简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;主流，基本上现在常用的App都是Hybrid-App&quot;&gt;&lt;a href=&quot;#主流，基本上现在常用的App都是Hybrid-App&quot; class=&quot;headerlink&quot; title=&quot;主流，基本上现在常用的App都是Hybrid App&quot;&gt;&lt;/a&gt;主流，基本上现在常用的App都是Hybrid App&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;AppStore、Instagram、微信(公众号、钱包)、支付宝（城市服务、电影、）、美团、滴滴、京东、汽车之家、联通手机营业厅……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;快速迭代，在不更新APP的情况下，修改、新增功能&quot;&gt;&lt;a href=&quot;#快速迭代，在不更新APP的情况下，修改、新增功能&quot; class=&quot;headerlink&quot; title=&quot;快速迭代，在不更新APP的情况下，修改、新增功能&quot;&gt;&lt;/a&gt;快速迭代，在不更新APP的情况下，修改、新增功能&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;例如：我们的新版首页，只要在服务器更新了，我的APP可以很快增加一个弱交互的模块；发现一些bug，也可以直接热修复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;开发统一，不管是Android、iOS，甚至是WP都可以统一开发，减少各个平台功能不统一的问题&quot;&gt;&lt;a href=&quot;#开发统一，不管是Android、iOS，甚至是WP都可以统一开发，减少各个平台功能不统一的问题&quot; class=&quot;headerlink&quot; title=&quot;开发统一，不管是Android、iOS，甚至是WP都可以统一开发，减少各个平台功能不统一的问题&quot;&gt;&lt;/a&gt;开发统一，不管是Android、iOS，甚至是WP都可以统一开发，减少各个平台功能不统一的问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1.原生开发专注于底层核心模块的开发、优化，封装好与web的交互接口。web实现功能模块后，所有端都无需重新开发&lt;/p&gt;
&lt;p&gt;2.例如：视频直播。原生开发专注与视频推流、视频播放、聊天功能的开发、优化，消息推送等，用web实现直播列表、直播创建等展示、数据编辑功能开发。相互之间定义好调用接口即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;总结我们现在混合开发发现的问题，优化我们的App&quot;&gt;&lt;a href=&quot;#总结我们现在混合开发发现的问题，优化我们的App&quot; class=&quot;headerlink&quot; title=&quot;总结我们现在混合开发发现的问题，优化我们的App&quot;&gt;&lt;/a&gt;总结我们现在混合开发发现的问题，优化我们的App&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们可以做得更好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;常见App开发模式&quot;&gt;&lt;a href=&quot;#常见App开发模式&quot; class=&quot;headerlink&quot; title=&quot;常见App开发模式&quot;&gt;&lt;/a&gt;常见App开发模式&lt;/h1&gt;&lt;h2 id=&quot;Native-App&quot;&gt;&lt;a href=&quot;#Native-App&quot; class=&quot;headerlink&quot; title=&quot;Native App&quot;&gt;&lt;/a&gt;Native App&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Native App，原生APP，一般依托于操作系统，有很强的交互，是一个完整的App，可拓展性强。需要用户下载安装使用。&lt;strong&gt;原生开发人员数量众多，技术已成熟&lt;/strong&gt;。Android用Java语言，开发环境用android studio或Eclips等IDE；iOS用oc、swift，Mac+Xcode开发环境；WP用C#/C++，windows+Visual studio环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;性能好，用户体验最贴近系统&lt;/li&gt;
&lt;li&gt;能够访问本地资源（通讯录，相册、存储空间……）&lt;/li&gt;
&lt;li&gt;能够实现大部分的功能&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;缺点：&quot;&gt;&lt;a href=&quot;#缺点：&quot; class=&quot;headerlink&quot; title=&quot;缺点：&quot;&gt;&lt;/a&gt;缺点：&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;无法跨平台：Android和iOS都需要开发各自平台的版本——开发成本高；&lt;/li&gt;
&lt;li&gt;升级麻烦：每次升级都要下载安装包，Android还好，反正不需要审核，下载就下载吧，但iOS就麻烦了，发布每个版本还得经过App Store的审核，这导致第三个问题；&lt;/li&gt;
&lt;li&gt;Android和iOS很难同步发布。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Web-App&quot;&gt;&lt;a href=&quot;#Web-App&quot; class=&quot;headerlink&quot; title=&quot;Web App&quot;&gt;&lt;/a&gt;Web App&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;基本上H5写出的App，不需要下载安装。类似于现在所说的轻应用。生存在浏览器中的应用，基本上可以说是触屏版的网页应用。但也有电脑网页版的Web App，例如微软的office 365，Gmail等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;优点-1&quot;&gt;&lt;a href=&quot;#优点-1&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;无需升级、更新快&lt;/li&gt;
&lt;li&gt;同时跨多个平台、多个端&lt;/li&gt;
&lt;li&gt;用户使用方便&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;体验较差、设计受限制诸多&lt;/li&gt;
&lt;li&gt;设计受限制诸多&lt;/li&gt;
&lt;li&gt;无法获取系统级别的通知，提醒，动效等等&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Hybrid-App&quot;&gt;&lt;a href=&quot;#Hybrid-App&quot; class=&quot;headerlink&quot; title=&quot;Hybrid App&quot;&gt;&lt;/a&gt;Hybrid App&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;半原生半Web的混合类App。需要下载安装，看上去类似Native App，部分是用WebView，访问的内容是Web。但&lt;strong&gt;涉及到的技术成本、开发成本、学习成本比Web App高&lt;/strong&gt;，它综合了&lt;strong&gt;Web App的开发速度和Native App的高性能体验&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不管是Native还是Web，都具有各自的UI和布局能力、数据交互能力和脚本调用能力等。所以，&lt;strong&gt;Hybrid App更是一种开发模式，如何有效混合使用是个很大的技巧&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;特性对比&quot;&gt;&lt;a href=&quot;#特性对比&quot; class=&quot;headerlink&quot; title=&quot;特性对比&quot;&gt;&lt;/a&gt;特性对比&lt;/h2&gt;&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Native&lt;/th&gt;
&lt;th&gt;Hybrid&lt;/th&gt;
&lt;th&gt;web&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;用户体验&lt;/td&gt;
&lt;td&gt;很好&lt;/td&gt;
&lt;td&gt;好&lt;/td&gt;
&lt;td&gt;一般&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;图像渲染&lt;/td&gt;
&lt;td&gt;本地API&lt;/td&gt;
&lt;td&gt;html、Canvas、css&lt;/td&gt;
&lt;td&gt;混合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;性能&lt;/td&gt;
&lt;td&gt;非常快&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;慢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;跨平台成本&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;合理&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;碎片化&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;非常严重&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;严重&lt;/td&gt;
&lt;td&gt;严重&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;版本维护&lt;/td&gt;
&lt;td&gt;保守&lt;/td&gt;
&lt;td&gt;低延时&lt;/td&gt;
&lt;td&gt;开放&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络要求&lt;/td&gt;
&lt;td&gt;支持离线&lt;/td&gt;
&lt;td&gt;大部分依赖网络&lt;/td&gt;
&lt;td&gt;完全依赖网络&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;!--
## 技术特性对比
![技术特性](duibi.png)
--&gt;
&lt;h1 id=&quot;Hybrid-App误区&quot;&gt;&lt;a href=&quot;#Hybrid-App误区&quot; class=&quot;headerlink&quot; title=&quot;Hybrid App误区&quot;&gt;&lt;/a&gt;Hybrid App误区&lt;/h1&gt;&lt;h2 id=&quot;为了H5而Hybrid-App&quot;&gt;&lt;a href=&quot;#为了H5而Hybrid-App&quot; class=&quot;headerlink&quot; title=&quot;为了H5而Hybrid App&quot;&gt;&lt;/a&gt;为了H5而Hybrid App&lt;/h2&gt;&lt;p&gt;HTML5在Hybrid App模式中是一个最常被提起的概念。HTML确实强大，但HTML5处在目前的发展阶段，受到浏览器兼容性和手机硬件性能水平的影响，它所能提供的功能与Native仍然有很大差距。&lt;/p&gt;
&lt;p&gt;要明确一款App采用Hybrid App模式的根本原因是什么。&lt;strong&gt;作为一款App其最根本的功能是满足使用者的需求，而并不是服务某项新技术&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;忽略关键因素&quot;&gt;&lt;a href=&quot;#忽略关键因素&quot; class=&quot;headerlink&quot; title=&quot;忽略关键因素&quot;&gt;&lt;/a&gt;忽略关键因素&lt;/h2&gt;&lt;p&gt;谈到Hybrid App我们更多提及的是它有诸多优点，会被忽略的一些因素少被提起，&lt;strong&gt;这些因素又恰恰经常是一个Web页面能否正常运行在App中的决定性因素&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论是iOS还是Android，最敏感的一个问题莫过于内存管理，而在Web开发则对这个问题没有过多注意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在网络环境方面，App在Wifi、3G的切换，基站变化等诸多因素都会导致网络间歇性断开，但Web开发总是默认有一个稳定的网络环境,因此在对于不稳定网络环境问题的处理上也有所欠缺。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;没有明确的对于低速网络或不稳定网络访问的处理，在很多情况下这些页面的用户体验是很差的。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;富交互导致体验差&quot;&gt;&lt;a href=&quot;#富交互导致体验差&quot; class=&quot;headerlink&quot; title=&quot;富交互导致体验差&quot;&gt;&lt;/a&gt;富交互导致体验差&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;平台(Android/iOS/WP/PC)默认交互习惯不一致的体验。&lt;/li&gt;
&lt;li&gt;同样功能和Native界面存在的体验差距。&lt;blockquote&gt;
&lt;p&gt;无论在Android还是iOS平台上，都有各自的一套交互习惯，包括视觉风格，界面切换，操作习惯等，与Web习惯完全不同。&lt;/p&gt;
&lt;p&gt;当然Web方式也可模拟Native的交互方式，但&lt;strong&gt;这样的模拟首先提高了开发成本，有悖于最初的高效原则，从效果上看，也很难达到Native的流畅性&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;跨平台&quot;&gt;&lt;a href=&quot;#跨平台&quot; class=&quot;headerlink&quot; title=&quot;跨平台&quot;&gt;&lt;/a&gt;跨平台&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一次开发，跨平台运行是Web的优势，这也是很多App采用Hybrid模式的重要原因之一。但是&lt;strong&gt;兼容性绝对是一个不容忽视的问题。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;无论是机型、版本众多的Android，还是相对统一的iOS,不同版本之间的差异还是不容忽视的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hybrid App方案是一把双刃剑，一方面它平衡了Native App和Web页面的优缺点，一定程度上解决了迭代慢，版本依赖的问题，但另一个方面&lt;strong&gt;过度依赖Hybrid方案会造成Web前端开发成本快速上升，甚至造成App整体体验下降，甚至造成功能缺失。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;不要为了H5而Hybrid，控制好App中Native与Web的边界是重中之重。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;常见的Hybrid-App开发解决方案&quot;&gt;&lt;a href=&quot;#常见的Hybrid-App开发解决方案&quot; class=&quot;headerlink&quot; title=&quot;常见的Hybrid App开发解决方案&quot;&gt;&lt;/a&gt;常见的Hybrid App开发解决方案&lt;/h1&gt;&lt;h2 id=&quot;Cordova-PhoneGap&quot;&gt;&lt;a href=&quot;#Cordova-PhoneGap&quot; class=&quot;headerlink&quot; title=&quot;Cordova/PhoneGap&quot;&gt;&lt;/a&gt;Cordova/PhoneGap&lt;/h2&gt;&lt;p&gt;2010年将PhoneGap代码贡献给Apache软件基金（ASF），PhoneGap核心引擎成为新的开源项目Cordova。&lt;/p&gt;
&lt;p&gt;提供Hybrid API，可由JavaScript直接调用诸如加速度、摄像头、指南针、GPS、联系人等系统级API，完整的API列表请访问PhoneGap API Reference。&lt;br&gt;侧重于JS与原生的交互，&lt;strong&gt;开发简单，但性能差&lt;/strong&gt;，如触摸时反应不灵敏。&lt;/p&gt;
&lt;p&gt;用户列表：&lt;a href=&quot;https://github.com/wikimedia/WikipediaMobile&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科客户端&lt;/a&gt; &lt;a href=&quot;https://mobile.linkedin.com/zh-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LinkedIn iPad客户端&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;Ionic-Framework&quot;&gt;&lt;a href=&quot;#Ionic-Framework&quot; class=&quot;headerlink&quot; title=&quot;Ionic Framework&quot;&gt;&lt;/a&gt;Ionic Framework&lt;/h2&gt;&lt;p&gt;我们现在正在用&lt;/p&gt;
&lt;h2 id=&quot;MUI和HTML5-SDK&quot;&gt;&lt;a href=&quot;#MUI和HTML5-SDK&quot; class=&quot;headerlink&quot; title=&quot;MUI和HTML5+ SDK&quot;&gt;&lt;/a&gt;MUI和HTML5+ SDK&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定位：最接近原生体验的移动App的UI框架 &lt;a href=&quot;http://ask.dcloud.net.cn/docs/#http://ask.dcloud.net.cn/article/91&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mui产品概述&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以iOS平台UI为基础，补充部分Android平台特有的UI控件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HTML5+ SDK&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;使用HTML5+ SDK实现本地打包。&lt;/li&gt;
&lt;li&gt;通过原生代码扩展HTML5+ runtime的功能。&lt;/li&gt;
&lt;li&gt;在现有原生项目中使用HTML5+ SDK&lt;strong&gt;替换原有的webview，以获得更强的web增强表现&lt;/strong&gt;。&lt;br&gt;&lt;a href=&quot;http://ask.dcloud.net.cn/docs/#http://ask.dcloud.net.cn/article/104&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5+ SDK 功能概述&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;用户列表：360生活助手 &lt;a href=&quot;https://itunes.apple.com/cn/app/id468630782&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;明道OA&lt;/a&gt; &lt;a href=&quot;https://itunes.apple.com/cn/app/hui-liu-xue-kou-dai-li-liu/id1044958285?mt=8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;会留学&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;React-Native&quot;&gt;&lt;a href=&quot;#React-Native&quot; class=&quot;headerlink&quot; title=&quot;React Native&quot;&gt;&lt;/a&gt;React Native&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native @ github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Facebook出品，初次学习成本很高，但优势是“Learn once, write anywhere”。React Native仍然不完善。iOS版本比较完善，Android版本还是实验性产品。&lt;/p&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实际上没有用到Webview，彻底摆脱了Webview让人不爽的交互和性能问题&lt;/li&gt;
&lt;li&gt;有较强的扩展性，这是因为Native端提供的是基本控件，JS可以自由组合使用&lt;/li&gt;
&lt;li&gt;可以直接使用Native原生的「牛逼」动画（在FB Group这个app里面，面板滑出带一点果冻弹动，面板基于某个点展开这种动画随处可见，这种动画用Native code来做小菜一碟，但是用Web来做就难上加难）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;我们怎么做&quot;&gt;&lt;a href=&quot;#我们怎么做&quot; class=&quot;headerlink&quot; title=&quot;我们怎么做&quot;&gt;&lt;/a&gt;我们怎么做&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;能够快速更新，但不需要更新App&lt;/li&gt;
&lt;li&gt;减少不同平台重复开发的工作量&lt;/li&gt;
&lt;li&gt;尽可能在UX上贴近原生&lt;/li&gt;
&lt;li&gt;用户无感知，用户不会感觉到就是打开一个网页&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;用户体验&quot;&gt;&lt;a href=&quot;#用户体验&quot; class=&quot;headerlink&quot; title=&quot;用户体验&quot;&gt;&lt;/a&gt;用户体验&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;流畅性一定要好&lt;/li&gt;
&lt;li&gt;完美兼容Android4.0以上、iOS7.0以上系统&lt;/li&gt;
&lt;li&gt;不要出现这种情况&lt;ul&gt;
&lt;li&gt;网络不好的情况下完全空白的现实 &lt;img src=&quot;/blog/post_images/hybrid-app-brief-talk-02.jpg&quot; alt=&quot;空白&quot;&gt;&lt;/li&gt;
&lt;li&gt;404，502之类的不直观提示   &lt;img src=&quot;/blog/post_images/hybrid-app-brief-talk-03.png&quot; alt=&quot;502&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;使用http请求头部的&lt;a href=&quot;http://www.cnblogs.com/zh2000g/archive/2010/03/22/1692002.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;If-Modified-Since&lt;/a&gt;、&lt;a href=&quot;http://baike.baidu.com/item/ETag&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;If-None-Match&lt;/a&gt;&lt;br&gt;；使用http响应头部的Last-Modify、Cache-Control&lt;/li&gt;
&lt;li&gt;重要的界面，App本身最好缓存一份，避免网络原因造成的界面空白&lt;/li&gt;
&lt;li&gt;App端的缓存机制尽量按http响应头里参数来设置，除非用户强制刷新&lt;/li&gt;
&lt;li&gt;大的第三方js库、字体最好App本身就已经集成，不需要从网络下载&lt;/li&gt;
&lt;li&gt;对于一些不常变化的文件，可以集成在App内&lt;!--  6. 使用*suppressesIncrementalRendering:YES*  --&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;这样做&quot;&gt;&lt;a href=&quot;#这样做&quot; class=&quot;headerlink&quot; title=&quot;这样做&quot;&gt;&lt;/a&gt;这样做&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;现阶段只针对交互较少的节目才考虑试用web实现，&lt;/li&gt;
&lt;li&gt;使用○转圈圈之类的加载动画代替进度条加载，这样会感觉更像原生&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将一些App本身的业务封装好，以统一的js方法暴露给web，并形成API文档。这样web能够通过这些API文档，实现更多的功能，达到App不更新的情况下，实现更多需求。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：是否登录is_login；账号类型account_type；跳转登录do_login；跳转到某个分类的视频列表：show_video_categary，等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引入JSBridge实现Hybrid API（iOS:&lt;a href=&quot;https://github.com/marcuswestin/WebViewJavascriptBridge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebViewJavascriptBridge&lt;/a&gt; / Android:&lt;a href=&quot;https://github.com/lzyzsd/JsBridge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsBridge&lt;/a&gt;）简化原生和web之间的交互调用 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Url里面定义好需要原生展示的内容、或执行的方法，例如： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Url: &lt;strong&gt;loadData.php?id=abcd&amp;amp;title=Title&amp;amp;title_buttons=Add&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么当App加载这个地址时服务器会返回&lt;strong&gt;id=abcd&lt;/strong&gt;的数据，同时App检测到title和buttons参数，会显示&lt;strong&gt;Title标题&lt;/strong&gt;，然后在标题栏上加上&lt;strong&gt;新增按钮&lt;/strong&gt;。这些都不用等到网页加载出来。&lt;br&gt;&lt;img src=&quot;/blog/post_images/hybrid-app-brief-talk-04.png&quot; alt=&quot;加载中&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在加载的过程中把webview隐藏，等到web加载成功后，在通过动画效果之类的把webview展示出来，避免用户看到整个web的渲染过程。特别是html已经渲染出来，但是css或js还没有完成，用户看到的就是一个&lt;strong&gt;不正常的界面&lt;/strong&gt;了。&lt;br&gt;&lt;img src=&quot;/blog/post_images/hybrid-app-brief-talk-05.jpg&quot; alt=&quot;渲染中&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;App中web部分的实现，要更多考虑细节的，因为web实现的界面，天生就缺乏一些原生自带的特性。细节处理不到位，会显得App很粗糙。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;App必须更多的考虑用户网络不稳定的问题&lt;/strong&gt;，并针对性的在模拟不同网络环境去测试、优化Hybrid模块的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://software.it168.com/a2014/0925/1669/000001669385.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;真正的Hybrid APP没你想的那么简单&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/hybridapp-misunderstanding/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;别闯进Hybrid App的误区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://36kr.com/p/5036836.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在微信还没统一所有应用前，Hybrid APP或许会先吃掉你的整个手机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mux.baidu.com/?p=6750&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;聊聊WEB APP、HYBRID APP与NATIVE APP的设计差异&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/yeahui/p/5026587.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;混合模式(Hybrid)App开发概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/23622875&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何区别一个 App 是 Native App， Web App 还是 Hybrid app？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/28469978&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝app属于hybrid app吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sssslide.com/speakerdeck.com/lokimeyburg/how-to-build-fast-hybrid-ios-apps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;how to build fast hybrid ios apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/hybrid-app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;跨终端Web之Hybrid App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/27852694&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何评价 React Native？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lincode.github.io/Hybrid-Rexxar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;豆瓣混合开发实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004263182&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hybrid APP架构设计思路&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浅谈Hybrid-App开发&quot;&gt;&lt;a href=&quot;#浅谈Hybrid-App开发&quot; class=&quot;headerlink&quot; title=&quot;浅谈Hybrid App开发&quot;&gt;&lt;/a&gt;浅谈Hybrid App开发&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我们常说的：在Android、iOS上的用H5来做界面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们把档次稍微提高一下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今天和大家分享的是&lt;strong&gt; Hybrid App 的开发&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hybrid App开发&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它不是手机网页开发、不是html、不是h5，但又都是&lt;/li&gt;
&lt;li&gt;做这个需要懂iOS、Android，还要懂html、js、css&lt;/li&gt;
&lt;li&gt;最麻烦的还是兼容性，主要的工作还是在web开发上&lt;/li&gt;
&lt;li&gt;已是主流了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/blog/post_images/hybrid-app-brief-talk-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为什么要谈Hybrid-App开发&quot;&gt;&lt;a href=&quot;#为什么要谈Hybrid-App开发&quot; class=&quot;headerlink&quot; title=&quot;为什么要谈Hybrid App开发&quot;&gt;&lt;/a&gt;为什么要谈Hybrid App开发&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;我们现在的App就是Hybrid-App&quot;&gt;&lt;a href=&quot;#我们现在的App就是Hybrid-App&quot; class=&quot;headerlink&quot; title=&quot;我们现在的App就是Hybrid App&quot;&gt;&lt;/a&gt;我们现在的App就是Hybrid App&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所以我们做得比较简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;主流，基本上现在常用的App都是Hybrid-App&quot;&gt;&lt;a href=&quot;#主流，基本上现在常用的App都是Hybrid-App&quot; class=&quot;headerlink&quot; title=&quot;主流，基本上现在常用的App都是Hybrid App&quot;&gt;&lt;/a&gt;主流，基本上现在常用的App都是Hybrid App&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;AppStore、Instagram、微信(公众号、钱包)、支付宝（城市服务、电影、）、美团、滴滴、京东、汽车之家、联通手机营业厅……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;快速迭代，在不更新APP的情况下，修改、新增功能&quot;&gt;&lt;a href=&quot;#快速迭代，在不更新APP的情况下，修改、新增功能&quot; class=&quot;headerlink&quot; title=&quot;快速迭代，在不更新APP的情况下，修改、新增功能&quot;&gt;&lt;/a&gt;快速迭代，在不更新APP的情况下，修改、新增功能&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;例如：我们的新版首页，只要在服务器更新了，我的APP可以很快增加一个弱交互的模块；发现一些bug，也可以直接热修复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;开发统一，不管是Android、iOS，甚至是WP都可以统一开发，减少各个平台功能不统一的问题&quot;&gt;&lt;a href=&quot;#开发统一，不管是Android、iOS，甚至是WP都可以统一开发，减少各个平台功能不统一的问题&quot; class=&quot;headerlink&quot; title=&quot;开发统一，不管是Android、iOS，甚至是WP都可以统一开发，减少各个平台功能不统一的问题&quot;&gt;&lt;/a&gt;开发统一，不管是Android、iOS，甚至是WP都可以统一开发，减少各个平台功能不统一的问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1.原生开发专注于底层核心模块的开发、优化，封装好与web的交互接口。web实现功能模块后，所有端都无需重新开发&lt;/p&gt;
&lt;p&gt;2.例如：视频直播。原生开发专注与视频推流、视频播放、聊天功能的开发、优化，消息推送等，用web实现直播列表、直播创建等展示、数据编辑功能开发。相互之间定义好调用接口即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;总结我们现在混合开发发现的问题，优化我们的App&quot;&gt;&lt;a href=&quot;#总结我们现在混合开发发现的问题，优化我们的App&quot; class=&quot;headerlink&quot; title=&quot;总结我们现在混合开发发现的问题，优化我们的App&quot;&gt;&lt;/a&gt;总结我们现在混合开发发现的问题，优化我们的App&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们可以做得更好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="App" scheme="https://re2x.com/categories/App/"/>
    
    
      <category term="Hybrid" scheme="https://re2x.com/tags/Hybrid/"/>
    
      <category term="H5" scheme="https://re2x.com/tags/H5/"/>
    
      <category term="混合开发" scheme="https://re2x.com/tags/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
